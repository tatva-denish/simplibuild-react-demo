{"version":3,"sources":["actions/users.js","reducers/users.js","reducers/index.js","store/index.js","components/Header/styles.js","components/Header/index.js","components/Users/styles.js","components/Users/pagination.js","components/Users/index.js","components/Users/users.js","services/api.js","containers/Home/styles.js","containers/Home/index.js","services/userService.js","App.js","serviceWorker.js","index.js"],"names":["getUsersFailed","payload","type","initialState","results","info","error","usersReducer","state","action","rootReducer","combineReducers","users","configureStore","composeEnhancers","compose","enhancers","applyMiddleware","thunk","store","createStore","headerStyles","makeStyles","theme","root","flexGrow","title","Header","classes","className","AppBar","Toolbar","Typography","variant","paginationStyle","flexShrink","marginLeft","spacing","tableContainerStyle","container","marginTop","marginBottom","maxHeight","UsersPagination","count","page","rowsPerPage","onChangePage","IconButton","onClick","event","disabled","aria-label","Math","ceil","max","UsersTable","data","useState","currentPage","setCurrentPage","itemsPerPage","setItemsPerPage","emptyItems","min","length","usersData","slice","TableContainer","Paper","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","map","row","key","email","component","scope","picture","Avatar","src","thumbnail","name","first","charAt","toUpperCase","last","location","city","style","height","colSpan","TablePagination","rowsPerPageOptions","label","value","SelectProps","inputProps","native","newPage","onChangeRowsPerPage","parseInt","target","ActionsComponent","instance","axios","create","baseURL","responseType","interceptors","request","use","config","Promise","reject","response","status","message","loaderStyle","backdrop","zIndex","drawer","color","Home","dispatch","useDispatch","userData","useSelector","setMessage","loader","setloader","useEffect","get","then","catch","handleToastClose","reason","Container","Backdrop","open","CircularProgress","Users","Snackbar","autoHideDuration","onClose","Alert","severity","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.412fc2dd.chunk.js","sourcesContent":["export const GET_USERS_SUCCESS = \"GET_USERS_SUCCESS\";\r\nexport const GET_USERS_FAILED = \"GET_USERS_FAILED\";\r\n\r\n// Get users success action\r\nexport const getUsersSuccess = payload => ({\r\n  type: GET_USERS_SUCCESS,\r\n  payload\r\n});\r\n\r\n// Get users failed action\r\nexport const getUsersFailed = payload => ({\r\n  type: GET_USERS_FAILED,\r\n  payload\r\n});\r\n","import { GET_USERS_SUCCESS, GET_USERS_FAILED } from \"../actions/users\";\r\n\r\n// Initial values\r\nconst initialState = {\r\n  results: [],\r\n  info: {},\r\n  error: \"\"\r\n};\r\n\r\n// Users Reducer\r\nconst usersReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    // Set users data on success\r\n    case GET_USERS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        error: \"\",\r\n        results: action.payload.results,\r\n        info: action.payload.info\r\n      };\r\n    // Set error message on failed\r\n    case GET_USERS_FAILED:\r\n      return { ...state, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default usersReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport usersReducer from \"./users\";\r\n\r\n/**\r\n * Combine reducers to root reducer.\r\n */\r\nconst rootReducer = combineReducers({\r\n  users: usersReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport rootReducer from \"../reducers\";\r\n\r\n/**\r\n * Store configuration\r\n * @params initialState\r\n */\r\nconst configureStore = (initialState = {}) => {\r\n  let composeEnhancers = compose;\r\n\r\n  // Disable Redux dev tools for production mode\r\n  if (process.env.NODE_ENV !== \"production\" && typeof window === \"object\") {\r\n    /* eslint-disable no-underscore-dangle */\r\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__)\r\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\r\n    /* eslint-enable */\r\n  }\r\n  // Added thunk middleware\r\n  const enhancers = [applyMiddleware(thunk)];\r\n  // Created store\r\n  const store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeEnhancers(...enhancers)\r\n  );\r\n\r\n  return store;\r\n};\r\n\r\nexport default configureStore;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\n// Header style\r\nconst headerStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nexport { headerStyles };\r\n","import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { headerStyles } from \"./styles\";\r\n\r\n/**\r\n * Header component\r\n */\r\nconst Header = () => {\r\n  const classes = headerStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Users\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Toolbar />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\n// Pagination style\r\nconst paginationStyle = makeStyles(theme => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5)\r\n  }\r\n}));\r\n\r\n// Table container style\r\nconst tableContainerStyle = makeStyles(theme => ({\r\n  container: {\r\n    marginTop: \"40px\",\r\n    marginBottom: \"40px\",\r\n    maxHeight: 500\r\n  }\r\n}));\r\n\r\nexport { paginationStyle, tableContainerStyle };\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\r\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\r\n\r\nimport { paginationStyle } from \"./styles\";\r\n\r\n/**\r\n * User pagination component\r\n * @param {number} count\r\n * @param {number} page\r\n * @param {number} rowsPerPage\r\n * @param {function} onChangePage\r\n */\r\n\r\nconst UsersPagination = ({ count, page, rowsPerPage, onChangePage }) => {\r\n  const classes = paginationStyle();\r\n\r\n  // Navigate to first page\r\n  const handleFirstPageClick = event => {\r\n    onChangePage(event, 0);\r\n  };\r\n  // Navigate to last page\r\n  const handleLastPageClick = event => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n  // Navigate to previous page\r\n  const handleBackClick = event => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n  // Navigate to next page\r\n  const handleNextClick = event => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        <FirstPageIcon />\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleBackClick}\r\n        disabled={page === 0}\r\n        aria-label=\"previous page\"\r\n      >\r\n        <KeyboardArrowLeft />\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        <KeyboardArrowRight />\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        <LastPageIcon />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nUsersPagination.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired\r\n};\r\n\r\nexport default UsersPagination;\r\n","import UsersTable from \"./users\";\r\n\r\nexport default UsersTable;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Paper,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  TablePagination,\r\n  Avatar,\r\n  Typography\r\n} from \"@material-ui/core\";\r\n\r\nimport { tableContainerStyle } from \"./styles\";\r\nimport UsersPagination from \"./pagination\";\r\n\r\n/**\r\n * Users Listing\r\n * @param {object} data\r\n */\r\nconst UsersTable = ({ data }) => {\r\n  const classes = tableContainerStyle();\r\n\r\n  const [currentPage, setCurrentPage] = useState(0); // Current page state\r\n  const [itemsPerPage, setItemsPerPage] = useState(10); // Items per page for table\r\n\r\n  // Count empty rows\r\n  const emptyItems =\r\n    itemsPerPage -\r\n    Math.min(itemsPerPage, data.length - currentPage * itemsPerPage);\r\n  // Users data filters for pagination\r\n  const usersData =\r\n    itemsPerPage > 0\r\n      ? data.slice(\r\n          currentPage * itemsPerPage,\r\n          currentPage * itemsPerPage + itemsPerPage\r\n        )\r\n      : data;\r\n\r\n  // Page change event handler\r\n  const handleChangePage = (event, newPage) => {\r\n    setCurrentPage(newPage);\r\n  };\r\n  // Items per page change event handler\r\n  const handleChangeItemsPerPage = event => {\r\n    setItemsPerPage(parseInt(event.target.value, 10));\r\n    setCurrentPage(0);\r\n  };\r\n\r\n  // Display message if no any item found\r\n  if (usersData && !usersData.length) {\r\n    return (\r\n      <TableContainer className={classes.container}>\r\n        <Typography variant=\"h4\" className={classes.title}>\r\n          No results found\r\n        </Typography>\r\n      </TableContainer>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Paper>\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell></TableCell>\r\n              <TableCell>Name</TableCell>\r\n              <TableCell>Email</TableCell>\r\n              <TableCell>City</TableCell>\r\n              <TableCell>State</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {usersData.map(row => (\r\n              <TableRow key={row.email}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {(row.picture && <Avatar src={row.picture.thumbnail} />) || (\r\n                    <Avatar>\r\n                      {row.name && row.name.first.charAt(0).toUpperCase()}\r\n                    </Avatar>\r\n                  )}\r\n                </TableCell>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.name && row.name.first} {row.name && row.name.last}\r\n                </TableCell>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.email}\r\n                </TableCell>\r\n                <TableCell>{row.location && row.location.city}</TableCell>\r\n                <TableCell>{row.location && row.location.state}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n\r\n            {emptyItems > 0 && (\r\n              <TableRow style={{ height: 53 * emptyItems }}>\r\n                <TableCell colSpan={5} />\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[5, 10, 25, { label: \"All\", value: -1 }]}\r\n        colSpan={5}\r\n        count={data.length}\r\n        rowsPerPage={itemsPerPage}\r\n        page={currentPage}\r\n        SelectProps={{\r\n          inputProps: { \"aria-label\": \"items per page\" },\r\n          native: true\r\n        }}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeItemsPerPage}\r\n        ActionsComponent={UsersPagination}\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default UsersTable;\r\n","import axios from \"axios\";\r\n\r\n// Created Axios instance\r\nconst instance = axios.create({\r\n  baseURL: \"https://randomuser.me/api/\",\r\n  responseType: \"json\"\r\n});\r\n\r\n// Add a request interceptor\r\ninstance.interceptors.request.use(\r\n  config => {\r\n    return config;\r\n  },\r\n  error => Promise.reject(error)\r\n);\r\n\r\n// Add a response interceptor for global notifications and response log\r\ninstance.interceptors.response.use(\r\n  response => {\r\n    // Response formate on API success\r\n    return {\r\n      status: \"success\",\r\n      message: \"\",\r\n      data: response.data\r\n    };\r\n  },\r\n  error => {\r\n    // Response formate on API failed with error message\r\n    return {\r\n      status: \"failed\",\r\n      message: error.message,\r\n      data: []\r\n    };\r\n  }\r\n);\r\n\r\nexport default instance;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\n// Loader style\r\nconst loaderStyle = makeStyles(theme => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: \"#fff\"\r\n  }\r\n}));\r\n\r\nexport { loaderStyle };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport Header from \"../../components/Header\";\r\nimport Users from \"../../components/Users\";\r\n// API Services\r\nimport { getUsers } from \"../../services/userService\";\r\n// Actions\r\nimport { getUsersSuccess, getUsersFailed } from \"../../actions/users\";\r\nimport { loaderStyle } from \"./styles\";\r\n\r\nconst Home = () => {\r\n  const classes = loaderStyle();\r\n\r\n  const dispatch = useDispatch(); // Dispatch actions\r\n  const userData = useSelector(state => state.users.results); // Get users list from store\r\n  const [message, setMessage] = useState({ message: \"\", type: \"\", color: \"\" }); // Notification message state\r\n  const [loader, setloader] = useState(false); // Loader state\r\n\r\n  useEffect(() => {\r\n    // Call getUsers API to retrieve users data\r\n    setloader(true); // Enable loader\r\n    getUsers({ count: 50 })\r\n      .then(response => {\r\n        setloader(false); // Disable loader\r\n        // Response handling\r\n        if (response.status === \"success\") {\r\n          // Display success message and store data in redux\r\n          setMessage({\r\n            message: \"Users data retrieved success\",\r\n            type: \"success\",\r\n            color: \"info\"\r\n          });\r\n          dispatch(getUsersSuccess(response.data));\r\n        } else {\r\n          // Display error message if error occurred\r\n          setMessage({\r\n            message: response.message,\r\n            type: \"error\",\r\n            color: \"error\"\r\n          });\r\n          dispatch(getUsersFailed(response.message));\r\n        }\r\n      })\r\n      .catch(() => {\r\n        setloader(false); // Disable loader\r\n        // Error handling if API failed\r\n        setMessage({\r\n          message: \"Something went wrong, please try again\",\r\n          type: \"error\",\r\n          color: \"error\"\r\n        });\r\n        dispatch(getUsersFailed(\"Something went wrong, please try again\"));\r\n      });\r\n  }, [dispatch]);\r\n\r\n  // Notification message handling\r\n  const handleToastClose = (event, reason) => {\r\n    if (reason === \"clickaway\") return;\r\n    setMessage({ message: \"\", type: \"\", color: \"\" });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Container>\r\n        <Backdrop className={classes.backdrop} open={loader}>\r\n          <CircularProgress color=\"inherit\" />\r\n        </Backdrop>\r\n        {!loader && <Users data={userData || []} />}\r\n        {message.message && (\r\n          <Snackbar\r\n            open={true}\r\n            autoHideDuration={3000}\r\n            onClose={handleToastClose}\r\n          >\r\n            <Alert\r\n              severity={message.type}\r\n              color={message.color}\r\n              onClose={handleToastClose}\r\n            >\r\n              {message.message}\r\n            </Alert>\r\n          </Snackbar>\r\n        )}\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import axios from \"./api\";\r\n\r\n/**\r\n * Get Users API call\r\n * @param {object} data\r\n */\r\nexport const getUsers = data => axios.get(`/?results=${data.count}`);\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./store\";\nimport Home from \"./containers/Home\";\n\n/**\n * Application's Root component\n */\nconst App = () => {\n  return (\n    <Provider store={store({})}>\n      <Home />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}